<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Birthday.Telegram.Bot</name>
    </assembly>
    <members>
        <member name="T:Birthday.Telegram.Bot.Configurations.BotConfiguration">
            <summary>
            Configuration parameters for current bot
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Configurations.BotConfiguration.AccessToken">
            <summary>
            Access token for connecting to a telegram bot
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Configurations.BotConfiguration.HostAddress">
            <summary>
            Address for hosted service
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Configurations.BotConfiguration.Socks5Host">
            <summary>
            Socks 5 host address
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Configurations.BotConfiguration.Socks5Port">
            <summary>
            Socks 5 port
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Controllers.BotController">
            <summary>
            Main bot controller
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Controllers.BotController.#ctor(Birthday.Telegram.Bot.Services.Abstractions.IBotUpdateService,Microsoft.Extensions.Logging.ILogger{Birthday.Telegram.Bot.Controllers.BotController})">
            <summary>
            Constructor
            </summary>
            <param name="botMessageService">Instance of BotMessageService</param>
            <param name="logger">ILogger instance</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Controllers.BotController.Post(Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>
                Post method for receive messages from Bot (Using webhook)
            </summary>
            <param name="update">New Update from bot</param>
            <param name="cancellationToken">Token for cancel current operation</param>
            <returns>Ok Action or error</returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Controls.CalendarPicker">
            <summary>
            Calendar picker control
            </summary>
        </member>
        <member name="F:Birthday.Telegram.Bot.Controls.CalendarPicker.MinimalDate">
            <summary>
            Минимально возможная дата
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Helpers.MigrationsHelper">
            <summary>
            Helper class with db migration
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Helpers.MigrationsHelper.RunMigrations(System.Reflection.Assembly,System.String)">
            <summary>
            Start execute migration
            </summary>
            <param name="assemblyWithMigrations">Сборка в которой хранятся миграции</param>
            <param name="connectionString">Строка подключения к БД</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Helpers.MigrationsHelper.CreateServices(System.Reflection.Assembly,System.String)">
            <summary>
            Configure the dependency injection services
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Helpers.MigrationsHelper.RunMigrations(System.IServiceProvider)">
            <summary>
            Update the database
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.MediatR.Commands.StartCommand">
            <summary>
            Start command request
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.MediatR.Handlers.StartCommandHandler">
            <summary>
            Handler for processing start command
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.MediatR.Handlers.StartCommandHandler.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{Birthday.Telegram.Bot.MediatR.Handlers.StartCommandHandler})">
            <summary>
            Constructor
            </summary>
            <param name="mediator">IMediatR instance</param>
            <param name="logger">ILogger instance</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.MediatR.Handlers.StartCommandHandler.Handle(Birthday.Telegram.Bot.MediatR.Commands.StartCommand,System.Threading.CancellationToken)">
            <summary>
            Handle of request
            </summary>
            <param name="request">Request</param>
            <param name="cancellationToken">Instance of cancellation token</param>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Constants">
            <summary>
            Class with constants values
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Constants.BotCommands">
            <summary>
            Bot message commands constants
            </summary>
        </member>
        <member name="F:Birthday.Telegram.Bot.Models.Constants.BotCommands.Start">
            <summary>
            Start command
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Constants.DotNetConstants">
            <summary>
            Constants for .Net Platform
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Constants.DotNetConstants.WellKnownEnvironments">
            <summary>
            Well known environment variables
            </summary>
        </member>
        <member name="F:Birthday.Telegram.Bot.Models.Constants.DotNetConstants.WellKnownEnvironments.AspNetCoreEnvironment">
            <summary>
            Asp net core environment variable
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Constants.TypedHttpClients">
            <summary>
            Names of typed https clients
            </summary>
        </member>
        <member name="F:Birthday.Telegram.Bot.Models.Constants.TypedHttpClients.TelegramApi">
            <summary>
            Telegram api http client name
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.Messages">
            <summary>
            Static class with prebuild messages
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Models.Messages.SpecialSymbols">
            <summary>
            REgex spec symbols
            </summary>
            <returns></returns>
        </member>
        <member name="P:Birthday.Telegram.Bot.Models.Messages.ParseMode">
            <summary>
            Parse mode for all messages
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.Messages.HelloMessage(System.String)">
            <summary>
            Hello message
            </summary>
            <param name="userName">Message for whom</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.Messages.MessageForGetBirthdayDate(System.String,System.String)">
            <summary>
            Приветственное сообщение когда бот хочет получить дату рождения пользователя
            </summary>
            <param name="userName">Имя пользователя</param>
            <param name="fromChatName">Откуда пришел пользователь</param>
            <returns>Сообщение</returns>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.Messages.HelloMessageFromBotToMainChat(System.String,System.String)">
            <summary>
            Приветственное сообщение от бота, когда он входит в главный чат
            </summary>
            <param name="botName">Название бота</param>
            <param name="mainChatId">Идентификатор главного чата</param>
            <returns>Приветственное сообщение</returns>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.Messages.HelloMessageForNewChatUser(System.String,System.String,System.String)">
            <summary>
            Приветственное сообщение от бота, когда новый пользователь входит в чат
            </summary>
            <param name="newUserName">Имя нового пользователя чата</param>
            <param name="botName">Название бота</param>
            <param name="mainChatId">Идентификатор главного чата</param>
            <returns>Приветственное сообщение</returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Models.TypedHttpClientInformation">
            <summary>
            Record that represent a typed http client
            </summary>
            <param name="ClientName">Current client name</param>
            <param name="Address">Current client address</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.TypedHttpClientInformation.#ctor(System.String,System.String)">
            <summary>
            Record that represent a typed http client
            </summary>
            <param name="ClientName">Current client name</param>
            <param name="Address">Current client address</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Models.TypedHttpClientInformation.ToString">
            <summary>
            Get string from client
            </summary>
            <returns>Http client name</returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Program">
            <summary>
            Entrypoint for current project service
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Program.Main(System.String[])">
            <summary>
            Method main
            </summary>
            <param name="args">Additional arguments for project</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Program.CreateHostBuilder(System.String[])">
            <summary>
            Method for cheare Hot for project
            </summary>
            <param name="args">Additional arguments for project</param>
            <returns>Instance of hots builder</returns>
        </member>
        <member name="M:Birthday.Telegram.Bot.Program.BuildConfiguration">
            <summary>
            Build configuration for current project
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.Abstractions.IBotChatMemberProcessor">
            <summary>
            Processor for chat member updates
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.Abstractions.IBotMessageProcessor">
            <summary>
            Processor for messages
            </summary>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.Abstractions.IBotProcessor`1">
            <summary>
            Process for bot actions
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.Abstractions.IBotProcessor`1.ProcessAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Process action
            </summary>
            <returns></returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.Abstractions.IBotUpdateService">
            <summary>
            Service for processing messages coming from the bot
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.Abstractions.IBotUpdateService.ProcessUpdateAsync(Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>
            Method for processing message from bot
            </summary>
            <param name="update">Message update</param>
            <param name="cancellationToken">Cancellation token instance</param>
            <returns>Completed task</returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.BotChatMemberProcessor">
            <summary>
            Processor for bot chat members
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.#ctor(Telegram.Bot.ITelegramBotClient)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.ProcessAsync(Telegram.Bot.Types.ChatMemberUpdated,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.ProcessAsync(Telegram.Bot.Types.ChatMemberUpdated,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.RemoveBotFromChatAction(Telegram.Bot.Types.Chat,System.Threading.CancellationToken)">
            <summary>
            Действия при удалении бота из чата
            </summary>
            <param name="chatInfo">Информация о чате из которого удалили бота</param>
            <param name="cancellationToken">Токен отмены операции</param>
            <returns>Задача</returns>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.AddNewMemberChatAction(Telegram.Bot.Types.Chat,Telegram.Bot.Types.User,Telegram.Bot.Types.User,System.Threading.CancellationToken)">
            <summary>
            Действие при добавлении нового пользователя в чат
            </summary>
            <param name="chatInfo">Информация о чате в который добавлен пользователь</param>
            <param name="newUser">Информация о новом пользователе</param>
            <param name="botInfo">Информация о новом боте</param>
            <param name="cancellationToken">Токен отмены операции</param>
            <returns>Задача</returns>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotChatMemberProcessor.RemoveMemberFromChatAction(Telegram.Bot.Types.Chat,System.Threading.CancellationToken)">
            <summary>
            Действие при удалении пользователя из чата
            </summary>
            <param name="chatInfo">Информация о чате из которого удален пользователь</param>
            <param name="cancellationToken">Токен отмены операции</param>
            <returns>Задача</returns>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.BotMessageProcessor">
            <summary>
            Processor for bot massages
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotMessageProcessor.#ctor(Telegram.Bot.ITelegramBotClient,Microsoft.Extensions.Logging.ILogger{Birthday.Telegram.Bot.Services.BotMessageProcessor})">
            <summary>
            Constructor
            </summary>
            <param name="telegramBotClient">Instance of telegram bot client</param>
            <param name="logger">Instance of Logger</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotMessageProcessor.ProcessAsync(Telegram.Bot.Types.Message,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.BotUpdateService">
            <inheritdoc cref="T:Birthday.Telegram.Bot.Services.Abstractions.IBotUpdateService" />
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotUpdateService.#ctor(Telegram.Bot.ITelegramBotClient,MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{Birthday.Telegram.Bot.Services.BotUpdateService},Birthday.Telegram.Bot.Services.Abstractions.IBotChatMemberProcessor,Birthday.Telegram.Bot.Services.Abstractions.IBotMessageProcessor)">
            <summary>
            Constructor
            </summary>
            <param name="botClient">Bot client instance</param>
            <param name="mediator">Mediator</param>
            <param name="logger">Logger</param>
            <param name="botChatMemberProcessor">Instance of processor for chat members</param>
            <param name="botMessageProcessor">Instance of processor for messages</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotUpdateService.ProcessUpdateAsync(Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Birthday.Telegram.Bot.Services.BotUpdateService.ProcessUpdateAsync(Telegram.Bot.Types.Update,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.BotUpdateService.HandleErrorAsync(System.Exception)">
            <summary>
            Handle raised error in system
            </summary>
            <param name="exception">Current exception</param>
        </member>
        <member name="T:Birthday.Telegram.Bot.Services.ConfigureWebhookHostedService">
            <summary>
            Hosted service for configure webhook for current service
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.ConfigureWebhookHostedService.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Birthday.Telegram.Bot.Configurations.BotConfiguration},Microsoft.Extensions.Logging.ILogger{Birthday.Telegram.Bot.Services.ConfigureWebhookHostedService})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider">Instance of IServiceProvider</param>
            <param name="options">Instance of options for bot configuration</param>
            <param name="logger">Instance of ILogger</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.ConfigureWebhookHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start bot and set webhook
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Services.ConfigureWebhookHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop bot work
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Birthday.Telegram.Bot.Startup">
            <summary>
            Startup class with configurations for current project
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Startup.Configuration">
            <summary>
            IConfiguration property
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Startup.WebHostEnvironment">
            <summary>
            IWebHostEnvironment property
            </summary>
        </member>
        <member name="P:Birthday.Telegram.Bot.Startup.BotConfig">
            <summary>
            Bot configuration
            </summary>
        </member>
        <member name="M:Birthday.Telegram.Bot.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor
            </summary>
            <param name="configuration">IConfiguration instance</param>
            <param name="webHostEnvironment">IWebHostEnvironment instance</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method for configuration DI services for current project
            </summary>
            <param name="services">Instance of IServiceCollection</param>
        </member>
        <member name="M:Birthday.Telegram.Bot.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
             This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
             <param name="app">Instance of IApplicationBuilder</param>
             <param name="env">Instance of IWebHostEnvironment</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions">
            <summary>
            Class with extensions for IAppicationBuilder instance
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UserCustomSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extemsion for put swagger in asp new middleware
            </summary>
            <param name="builder">Instance of IApplicationBuilder</param>
            <returns>Instance of IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionsExtensions">
            <summary>
            Class with extensions for IServiceCollection
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionsExtensions.AddCustomOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure additional IOptions params
            </summary>
            <param name="services">Instance of IServiceCollection</param>
            <param name="configuration">Instance of IConfiguration</param>
            <returns>IServiceCollection instance</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionsExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register services for create connection to Swagger
            </summary>
            <param name="services">Instance of IServiceCollection</param>
            <returns>IServiceCollection instance</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionsExtensions.AddCustomServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add custom HttpClients for current service
            </summary>
            <param name="services">Instance of IServiceCollection</param>
            <param name="configuration">IConfiguration instance</param>
            <returns>IServiceCollection instance</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionsExtensions.AddCustomLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Добавить настройки логирования для данного проекта
            </summary>
            <param name="services">Экземпляр коллекции сервисов типа IServiceCollection</param>
            <returns>Экземпляр коллекции сервисов типа IServiceCollection</returns>
        </member>
        <member name="T:DevQuiz.TelegramBot.Models.ApiResults.SetWebHookApiResult">
            <summary>
                Set web hook api result model
            </summary>
        </member>
        <member name="P:DevQuiz.TelegramBot.Models.ApiResults.SetWebHookApiResult.Ok">
            <summary>
                Set web hook status
            </summary>
        </member>
        <member name="P:DevQuiz.TelegramBot.Models.ApiResults.SetWebHookApiResult.Error_code">
            <summary>
                Error code
            </summary>
        </member>
        <member name="P:DevQuiz.TelegramBot.Models.ApiResults.SetWebHookApiResult.Description">
            <summary>
            Description message
            </summary>
        </member>
    </members>
</doc>
